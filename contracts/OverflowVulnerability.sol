// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract OverflowVulnerability {
    mapping(address => uint256) public balances;
    uint256 public totalSupply;

    // Integer overflow vulnerability - no SafeMath protection
    function deposit() public payable {
        balances[msg.sender] += msg.value; // Potential overflow
        totalSupply += msg.value; // Potential overflow
    }

    // Integer overflow in arithmetic operations
    function unsafeAdd(uint256 a, uint256 b) public pure returns (uint256) {
        return a + b; // No overflow check
    }

    function unsafeMultiply(
        uint256 a,
        uint256 b
    ) public pure returns (uint256) {
        return a * b; // No overflow check
    }

    function unsafeSubtract(
        uint256 a,
        uint256 b
    ) public pure returns (uint256) {
        return a - b; // No underflow check
    }

    // Array length overflow
    function unsafeArrayAccess(
        uint256[] memory arr,
        uint256 index
    ) public pure returns (uint256) {
        return arr[index]; // No bounds checking
    }

    // Loop counter overflow
    function unsafeLoop(uint256 iterations) public pure returns (uint256) {
        uint256 result = 0;
        for (uint256 i = 0; i < iterations; i++) {
            // Potential overflow
            result += i;
        }
        return result;
    }

    // Timestamp overflow (year 2038 problem)
    function getTimestamp() public view returns (uint256) {
        return block.timestamp; // Could overflow in 2038
    }
}
