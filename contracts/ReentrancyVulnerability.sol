// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ReentrancyVulnerability {
    mapping(address => uint256) public balances;

    // Classic reentrancy vulnerability
    function withdraw() public {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "Insufficient balance");

        // State change after external call - VULNERABLE!
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        balances[msg.sender] = 0; // State change too late
    }

    // Reentrancy in deposit function
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    // Cross-function reentrancy
    function transfer(address to, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[to] += amount;
    }

    // Cross-contract reentrancy
    function callExternalContract(address target, bytes calldata data) public {
        (bool success, ) = target.call(data);
        require(success, "External call failed");

        // State change after external call
        balances[msg.sender] += 1;
    }

    // Reentrancy in fallback function
    receive() external payable {
        // Vulnerable fallback that can be reentered
        if (msg.sender.balance > 0) {
            balances[msg.sender] += msg.value;
        }
    }

    // Multiple external calls without reentrancy guard
    function batchWithdraw(
        address[] calldata recipients,
        uint256[] calldata amounts
    ) public {
        for (uint256 i = 0; i < recipients.length; i++) {
            uint256 amount = amounts[i];
            require(balances[msg.sender] >= amount, "Insufficient balance");

            balances[msg.sender] -= amount;
            (bool success, ) = recipients[i].call{value: amount}("");
            require(success, "Transfer failed");
        }
    }
}
