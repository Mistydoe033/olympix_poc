// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AccessControlVulnerability {
    address public owner;
    mapping(address => bool) public authorizedUsers;
    uint256 public sensitiveData;

    constructor() {
        owner = msg.sender;
    }

    // Missing access control - anyone can call
    function setSensitiveData(uint256 _data) public {
        sensitiveData = _data; // No access control!
    }

    // Weak access control - only checks if sender is not zero
    function weakAccessControl(uint256 _data) public {
        require(msg.sender != address(0), "Zero address not allowed");
        sensitiveData = _data; // Weak check
    }

    // Access control bypass through tx.origin
    function vulnerableWithTxOrigin(address _user) public {
        require(tx.origin == owner, "Only owner can call"); // VULNERABLE!
        authorizedUsers[_user] = true;
    }

    // Missing modifier usage
    function changeOwner(address newOwner) public {
        // Should use modifier but doesn't
        owner = newOwner;
    }

    // Public function that should be private
    function internalFunction() public {
        // This should be private/internal
        sensitiveData = 0;
    }

    // Unrestricted admin function
    function adminFunction() public {
        // No access control at all
        selfdestruct(payable(msg.sender));
    }

    // Access control in wrong function
    function publicFunction() public {
        // This is public but has access control
        require(msg.sender == owner, "Only owner");
        sensitiveData = 1;
    }

    // Missing access control in constructor
    constructor(address _initialOwner) {
        // No validation of _initialOwner
        owner = _initialOwner;
    }

    // Access control bypass through delegatecall
    function delegateCallVulnerability(
        address target,
        bytes calldata data
    ) public {
        // No access control before delegatecall
        (bool success, ) = target.delegatecall(data);
        require(success, "Delegatecall failed");
    }
}
