// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TimestampDependenceVulnerability {
    mapping(address => uint256) public lastClaimTime;
    uint256 public lotteryDeadline;
    uint256 public randomSeed;

    // Timestamp-based randomness - VULNERABLE!
    function generateRandomNumber() public view returns (uint256) {
        return
            uint256(
                keccak256(abi.encodePacked(block.timestamp, block.difficulty))
            );
    }

    // Timestamp-based lottery
    function enterLottery() public {
        require(block.timestamp < lotteryDeadline, "Lottery ended");
        // Winner determined by timestamp
        if (block.timestamp % 2 == 0) {
            // Win condition based on timestamp
        }
    }

    // Timestamp-based claim system
    function claimReward() public {
        require(
            block.timestamp >= lastClaimTime[msg.sender] + 1 days,
            "Too early"
        );
        lastClaimTime[msg.sender] = block.timestamp;
        // Claim logic here
    }

    // Timestamp-based access control
    function timeBasedAccess() public view returns (bool) {
        return block.timestamp > 1640995200; // After 2022-01-01
    }

    // Timestamp-based state changes
    function updateState() public {
        if (block.timestamp > 1640995200) {
            // Change state based on timestamp
            randomSeed = block.timestamp;
        }
    }

    // Timestamp-based loop condition
    function timestampLoop() public {
        uint256 startTime = block.timestamp;
        while (block.timestamp < startTime + 1 hours) {
            // Loop based on timestamp - can be manipulated
        }
    }

    // Timestamp-based require condition
    function timeBasedRequire() public view {
        require(block.timestamp > 1640995200, "Too early");
    }

    // Timestamp-based if condition
    function timeBasedIf() public {
        if (block.timestamp > 1640995200) {
            // Execute based on timestamp
        }
    }

    // Timestamp-based mapping key
    function timestampMapping() public {
        mapping(uint256 => bool) storage timeMap;
        timeMap[block.timestamp] = true;
    }

    // Timestamp-based event
    event TimeEvent(uint256 timestamp);

    function emitTimeEvent() public {
        emit TimeEvent(block.timestamp);
    }
}
