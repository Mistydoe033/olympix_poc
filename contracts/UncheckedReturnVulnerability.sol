// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UncheckedReturnVulnerability {
    mapping(address => uint256) public balances;

    // Unchecked return from external call
    function uncheckedExternalCall(address target, bytes calldata data) public {
        target.call(data); // Return value ignored
    }

    // Unchecked return from low-level call
    function uncheckedLowLevelCall(address target, bytes calldata data) public {
        (bool success, ) = target.call(data);
        // success is ignored
    }

    // Unchecked return from delegatecall
    function uncheckedDelegateCall(address target, bytes calldata data) public {
        (bool success, ) = target.delegatecall(data);
        // success is ignored
    }

    // Unchecked return from staticcall
    function uncheckedStaticCall(
        address target,
        bytes calldata data
    ) public view returns (bytes memory) {
        (bool success, bytes memory result) = target.staticcall(data);
        // success is ignored
        return result;
    }

    // Unchecked return from transfer
    function uncheckedTransfer(
        address payable recipient,
        uint256 amount
    ) public {
        recipient.transfer(amount); // Return value ignored
    }

    // Unchecked return from send
    function uncheckedSend(address payable recipient, uint256 amount) public {
        recipient.send(amount); // Return value ignored
    }

    // Unchecked return from call with value
    function uncheckedCallWithValue(
        address target,
        bytes calldata data
    ) public payable {
        (bool success, ) = target.call{value: msg.value}(data);
        // success is ignored
    }

    // Unchecked return in loop
    function uncheckedReturnInLoop(
        address[] calldata targets,
        bytes calldata data
    ) public {
        for (uint256 i = 0; i < targets.length; i++) {
            targets[i].call(data); // Return value ignored in loop
        }
    }

    // Unchecked return with conditional logic
    function uncheckedReturnWithCondition(
        address target,
        bytes calldata data,
        bool condition
    ) public {
        if (condition) {
            (bool success, ) = target.call(data);
            // success is ignored even when condition is true
        }
    }

    // Unchecked return in try-catch
    function uncheckedReturnInTryCatch(
        address target,
        bytes calldata data
    ) public {
        try target.call(data) returns (bool success) {
            // success is returned but not used
        } catch {
            // Handle error
        }
    }

    // Unchecked return from constructor
    constructor(address target, bytes calldata data) {
        target.call(data); // Return value ignored in constructor
    }

    // Unchecked return from fallback
    receive() external payable {
        // No return value checking in fallback
    }
}
